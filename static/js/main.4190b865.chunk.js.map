{"version":3,"sources":["Components/Wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","props","className","children","App","useState","display","setDisplay","classes","el","map","index","onClick","e","buttonPressed","target","innerHTML","concat","buttonHandler","value","answer","evaluate","toFixed","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAMeA,EAJC,SAAAC,GACZ,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAME,Y,QCoE5BC,MA7Df,WAEE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAmCMC,EAAU,SAACC,GAAD,MAAQ,SAAWA,EAAK,WACxC,OACE,eAAC,EAAD,WACE,qBAAKP,UAAU,OAAf,SAAuBI,IACvB,sBAAKJ,UAAU,UAAf,UArCU,CACZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAuBaQ,KAAI,SAACD,EAAIE,GAChB,OACE,qBACET,UAAWM,EAAQC,GAEnBG,QAAS,SAACC,GAAD,OAzBC,SAACA,GACrB,IAAMC,EAAgBD,EAAEE,OAAOC,UAC/BT,EAAWD,EAAQW,OAAOH,IAuBAI,CAAcL,IAC9BM,MAAOV,EAJT,SAMGA,GAJIE,MAQX,qBAAKT,UAAU,SAASU,QA3BT,WACnB,IAAIQ,EAASC,YAASf,GAASgB,QAAQ,GACvCf,EAAWa,EAAOG,aAyBd,eACA,qBAAKrB,UAAU,SAASU,QAvBT,WAEnBL,EADkB,KAsBd,uBCrDOiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4190b865.chunk.js","sourcesContent":["import './Wrapper.css'\n\nconst Wrapper = props => {\n    return <div className='wrapper'>{props.children}</div>\n}\n\nexport default Wrapper","import { useState } from \"react\";\nimport \"./App.css\";\nimport \"./Components/View.css\";\nimport \"./Components/Numbers.css\";\nimport \"./Components/Functions.css\";\nimport Wrapper from \"./Components/Wrapper\";\nimport { evaluate } from 'mathjs';\nimport \"./App.css\"\n\n\nfunction App() {\n\n  const [display, setDisplay] = useState(\"\");\n\n  let buttons = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"*\",\n    \"/\",\n    \"+\",\n    \"-\",\n    \".\"\n  ];\n\n  const buttonHandler = (e) => {\n    const buttonPressed = e.target.innerHTML\n    setDisplay(display.concat(buttonPressed));\n  };\n\n  const equalHandler = () => {\n    let answer = evaluate(display).toFixed(2)\n    setDisplay(answer.toString())\n  }\n\n  const clearHandler = () => {\n    let emptyString = \"\"\n    setDisplay(emptyString);\n  }\n  \n  const classes = (el) => \"button\" + el + \" number\"\n  return (\n    <Wrapper>\n      <div className=\"view\">{display}</div>\n      <div className=\"numbers\">\n        {buttons.map((el, index) => {\n          return (\n            <div\n              className={classes(el)}\n              key={index}\n              onClick={(e) => buttonHandler(e)}\n              value={el}\n            >\n              {el}\n            </div>\n          );\n        })}\n        <div className=\"number\" onClick={equalHandler}>=</div>\n        <div className=\"number\" onClick={clearHandler}>CE</div>\n      </div>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}